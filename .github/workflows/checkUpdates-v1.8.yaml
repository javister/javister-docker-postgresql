name: Check updates (v1.8)
on:
  schedule:
    - cron: "*/10 * * * *"
#    - cron: "* */24 * * *"
env:
  VERSION: 1.8
jobs:
  extractEnv:
    runs-on: ubuntu-latest
    outputs:
      imageName: ${{ steps.meta.outputs.imageName }}
      imageTag: ${{ steps.meta.outputs.imageTag }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: release-v${{ env.VERSION }}
      - name: Install xmlstarlet
        run: sudo apt-get install xmlstarlet
      - name: Get the Docker image meta
        id: meta
        run: |
          echo "::set-output name=imageName::javister-ntp.artifactory-jcr.krista.ru/$(xmlstarlet sel -N p=http://maven.apache.org/POM/4.0.0 -t -v "/p:project/p:properties/p:docker.image.artifactId" pom.xml)"
          echo "::set-output name=imageTag::$(xmlstarlet sel -N p=http://maven.apache.org/POM/4.0.0 -t -v "/p:project/p:properties/p:revision" pom.xml)"

  checkUpdates:
    runs-on: ubuntu-latest
    needs: [extractEnv]
    outputs:
      doRebuild: ${{ steps.result.outputs.doRebuild }}
    strategy:
      matrix:
        variant: [ 9.5, 9.6, 11, 12 ]
    steps:
      - name: Pull old Docker image v${{ matrix.variant }}
        run: |
          if docker pull ${{needs.extractEnv.outputs.imageName}}:${{ matrix.variant }}-${{needs.extractEnv.outputs.imageTag}}; then
              echo "oldImagePresent=true" >> $GITHUB_ENV
          else
              echo "doRebuild=true" >> $GITHUB_ENV
              echo "oldImagePresent=false" >> $GITHUB_ENV
          fi
      - name: Check updates in image v${{ matrix.variant }}
        if: env.oldImagePresent == 'true'
        run: |
          if [[ "$(docker run --rm ${{needs.extractEnv.outputs.imageName}}:${{ matrix.variant }}-${{needs.extractEnv.outputs.imageTag}} yum check-update -q | wc --lines)" -gt "3" ]]; then
              echo "doRebuild=true" >> $GITHUB_ENV
          fi
      - name: Set output
        id: result
        run: |
          if [ -n "${doRebuild}" ]; then
            echo "::set-output name=doRebuild::${doRebuild}"
          fi

  buildAndPush:
    runs-on: ubuntu-latest
    needs: [checkUpdates]
    if: needs.checkUpdates.outputs.doRebuild == 'true'
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
#          server-id: javister-ntp.artifactory-jcr.krista.ru
          server-id: krista-maven-public
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Configure Docker authentication
        run: echo '${{ secrets.DOCKER_LOGIN_CONFIG }}' > ~/.docker/config.json
      - uses: actions/checkout@v2
        with:
          ref: release-v${{ env.VERSION }}
      - name: Build and Check
        run: mvn --no-transfer-progress -Dstyle.color=always -Ddockerfile.build.noCache=true install
        env:
          MAVEN_USERNAME: ${{ secrets.KRISTA_REPO_USER }}
          MAVEN_PASSWORD: ${{ secrets.KRISTA_REPO_PASSWD }}
          MAVEN_OPTS: -Djansi.force=true
#      - name: Login to Krista Docker Registry
#        uses: docker/login-action@v1
#        with:
#          registry: javister-ntp.artifactory-jcr.krista.ru
#          username: ${{ secrets.KRISTA_REPO_USER }}
#          password: ${{ secrets.KRISTA_REPO_PASSWD }}
      - name: Push Docker image
        run: mvn --no-transfer-progress -Dstyle.color=always -DforcePush -DskipTests clean verify
        env:
          MAVEN_USERNAME: ${{ secrets.KRISTA_REPO_USER }}
          MAVEN_PASSWORD: ${{ secrets.KRISTA_REPO_PASSWD }}
          MAVEN_OPTS: -Djansi.force=true
      - name: Log configs
        if: always()
        run: |
          sudo cat /etc/resolv.conf || true
          sudo cat /etc/hosts || true
          sudo cat /etc/docker/* || true
          sudo cat ~/.docker/* || true
          sudo cat /etc/systemd/system/docker.service.d/* || true
          sudo cat /var/log/docker.log || true
          sudo journalctl -b -1 --no-pager || true
